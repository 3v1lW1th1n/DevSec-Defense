##############################################################################\n##\n## Add-ObjectCollector\n##\n## From Windows PowerShell Cookbook (O'Reilly)\n## by Lee Holmes (http://www.leeholmes.com/guide)\n##\n##############################################################################\n\n<#\n\n.SYNOPSIS\n\nAdds a new Out-Default command wrapper to store up to 500 elements from\nthe previous command. This wrapper stores output in the $ll variable.\n\n.EXAMPLE\n\nPS >Get-Command $pshome\\powershell.exe\n\nCommandType     Name                          Definition\n-----------     ----                          ----------\nApplication     powershell.exe                C:\\Windows\\System32\\Windo...\n\nPS >$ll.Definition\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n\n.NOTES\n\nThis command builds on New-CommandWrapper, also included in the Windows\nPowerShell Cookbook.\n\n#>\n\nSet-StrictMode -Version Latest\n\nNew-CommandWrapper Out-Default `\n    -Begin {\n        $cachedOutput = New-Object System.Collections.ArrayList\n    } `\n    -Process {\n        ## If we get an input object, add it to our list of objects\n        if($_ -ne $null) { $null = $cachedOutput.Add($_) }\n        while($cachedOutput.Count -gt 500) { $cachedOutput.RemoveAt(0) }\n    } `\n    -End {\n        ## Be sure we got objects that were not just errors (\n        ## so that we don't wipe out the saved output when we get errors\n        ## trying to work with it.)\n        ## Also don't caputre formatting information, as those objects\n        ## can't be worked with.\n        $uniqueOutput = $cachedOutput | Foreach-Object {\n            $_.GetType().FullName } | Select -Unique\n        $containsInterestingTypes = ($uniqueOutput -notcontains `\n            "System.Management.Automation.ErrorRecord") -and\n            ($uniqueOutput -notlike `\n                "Microsoft.PowerShell.Commands.Internal.Format.*")\n\n        ## If we actually had output, and it was interesting information,\n        ## save the output into the $ll variable\n        if(($cachedOutput.Count -gt 0) -and $containsInterestingTypes)\n        {\n            $GLOBAL:ll = $cachedOutput | % { $_ }\n        }\n    }
