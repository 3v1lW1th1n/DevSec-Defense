##############################################################################\n##\n## Add-RelativePathCapture\n##\n## From Windows PowerShell Cookbook (O'Reilly)\n## by Lee Holmes (http://www.leeholmes.com/guide)\n##\n##############################################################################\n\n<#\n\n.SYNOPSIS\n\nAdds a new Out-Default command wrapper that captures relative path\nnavigation without having to explicitly call 'Set-Location'\n\n.EXAMPLE\n\nPS C:\\Users\\Lee\\Documents>..\nPS C:\\Users\\Lee>...\nPS C:\\>\n\n.NOTES\n\nThis commands builds on New-CommandWrapper, also included in the Windows\nPowerShell Cookbook.\n\n#>\n\nSet-StrictMode -Version Latest\n\nNew-CommandWrapper Out-Default `\n    -Process {\n        if(($_ -is [System.Management.Automation.ErrorRecord]) -and\n            ($_.FullyQualifiedErrorId -eq "CommandNotFoundException"))\n        {\n            ## Intercept all CommandNotFound exceptions, where the actual\n            ## command consisted solely of dots.\n            $command = $_.TargetObject\n            if($command -match '^(\\.)+$')\n            {\n                ## Count the number of dots, and go that many levels (minus\n                ## one) up the directory hierarchy.\n                $newLocation = "..\\" * ($command.Length - 1)\n                if($newLocation) { Set-Location $newLocation }\n\n                ## Handle the error\n                $error.RemoveAt(0)\n                $_ = $null\n            }\n        }\n    }
