##############################################################################\n##\n## Connect-WebService\n##\n## From Windows PowerShell Cookbook (O'Reilly)\n## by Lee Holmes (http://www.leeholmes.com/guide)\n##\n## Connect to a given web service, and create a type that allows you to\n## interact with that web service. In PowerShell version two, use the\n## New-WebserviceProxy cmdlet.\n##\n## Example:\n##\n## $wsdl = "http://terraservice.net/TerraService.asmx?WSDL"\n## $terraServer = Connect-WebService $wsdl\n## $place = New-Object Place\n## $place.City = "Redmond"\n## $place.State = "WA"\n## $place.Country = "USA"\n## $facts = $terraserver.GetPlaceFacts($place)\n## $facts.Center\n##\n##############################################################################\n\nparam(\n    ## The URL that contains the WSDL\n    [string] $WsdlLocation = $(throw "Please specify a WSDL location"),\n\n    ## The namespace to use to contain the web service proxy\n    [string] $Namespace,\n\n    ## Switch to identify web services that require authentication\n    [Switch] $RequiresAuthentication\n)\n\n## Create the web service cache, if it doesn't already exist\nif(-not (Test-Path Variable:\\Lee.Holmes.WebServiceCache))\n{\n    ${GLOBAL:Lee.Holmes.WebServiceCache} = @{}\n}\n\n## Check if there was an instance from a previous connection to\n## this web service. If so, return that instead.\n$oldInstance = ${GLOBAL:Lee.Holmes.WebServiceCache}[$wsdlLocation]\nif($oldInstance)\n{\n    $oldInstance\n    return\n}\n\n## Load the required Web Services DLL\nAdd-Type -Assembly System.Web.Services\n\n## Download the WSDL for the service, and create a service description from\n## it.\n$wc = New-Object System.Net.WebClient\n\nif($requiresAuthentication)\n{\n    $wc.UseDefaultCredentials = $true\n}\n\n$wsdlStream = $wc.OpenRead($wsdlLocation)\n\n## Ensure that we were able to fetch the WSDL\nif(-not (Test-Path Variable:\\wsdlStream))\n{\n    return\n}\n\n$serviceDescription =\n    [Web.Services.Description.ServiceDescription]::Read($wsdlStream)\n$wsdlStream.Close()\n\n## Ensure that we were able to read the WSDL into a service description\nif(-not (Test-Path Variable:\\serviceDescription))\n{\n    return\n}\n\n## Import the web service into a CodeDom\n$serviceNamespace = New-Object System.CodeDom.CodeNamespace\nif($namespace)\n{\n    $serviceNamespace.Name = $namespace\n}\n\n$codeCompileUnit = New-Object System.CodeDom.CodeCompileUnit\n$serviceDescriptionImporter =\n    New-Object Web.Services.Description.ServiceDescriptionImporter\n$serviceDescriptionImporter.AddServiceDescription(\n    $serviceDescription, $null, $null)\n[void] $codeCompileUnit.Namespaces.Add($serviceNamespace)\n[void] $serviceDescriptionImporter.Import(\n    $serviceNamespace, $codeCompileUnit)\n\n## Generate the code from that CodeDom into a string\n$generatedCode = New-Object Text.StringBuilder\n$stringWriter = New-Object IO.StringWriter $generatedCode\n$provider = New-Object Microsoft.CSharp.CSharpCodeProvider\n$provider.GenerateCodeFromCompileUnit($codeCompileUnit, $stringWriter, $null)\n\n## Compile the source code.\n$references = @("System.dll", "System.Web.Services.dll", "System.Xml.dll")\n$compilerParameters = New-Object System.CodeDom.Compiler.CompilerParameters\n$compilerParameters.ReferencedAssemblies.AddRange($references)\n$compilerParameters.GenerateInMemory = $true\n\n$compilerResults =\n    $provider.CompileAssemblyFromSource($compilerParameters, $generatedCode)\n\n## Write any errors if generated.\nif($compilerResults.Errors.Count -gt 0)\n{\n    $errorLines = ""\n    foreach($error in $compilerResults.Errors)\n    {\n        $errorLines += "`n`t" + $error.Line + ":`t" + $error.ErrorText\n    }\n\n    Write-Error $errorLines\n    return\n}\n## There were no errors.  Create the webservice object and return it.\nelse\n{\n    ## Get the assembly that we just compiled\n    $assembly = $compilerResults.CompiledAssembly\n\n    ## Find the type that had the WebServiceBindingAttribute.\n    ## There may be other "helper types" in this file, but they will\n    ## not have this attribute\n    $type = $assembly.GetTypes() |\n        Where-Object { $_.GetCustomAttributes(\n            [System.Web.Services.WebServiceBindingAttribute], $false) }\n\n    if(-not $type)\n    {\n        Write-Error "Could not generate web service proxy."\n        return\n    }\n\n    ## Create an instance of the type, store it in the cache,\n    ## and return it to the user.\n    $instance = $assembly.CreateInstance($type)\n\n    ## Many services that support authentication also require it on the\n    ## resulting objects\n    if($requiresAuthentication)\n    {\n        if(@($instance.PsObject.Properties |\n            where { $_.Name -eq "UseDefaultCredentials" }).Count -eq 1)\n        {\n            $instance.UseDefaultCredentials = $true\n        }\n    }\n\n    ${GLOBAL:Lee.Holmes.WebServiceCache}[$wsdlLocation] = $instance\n\n    $instance\n}
